{"code":"import { __extends } from \"tslib\";\r\nvar Event = /** @class */ (function () {\r\n    function Event(type, target) {\r\n        this.target = target;\r\n        this.type = type;\r\n    }\r\n    return Event;\r\n}());\r\nexport { Event };\r\nvar ErrorEvent = /** @class */ (function (_super) {\r\n    __extends(ErrorEvent, _super);\r\n    function ErrorEvent(error, target) {\r\n        var _this = _super.call(this, 'error', target) || this;\r\n        _this.message = error.message;\r\n        _this.error = error;\r\n        return _this;\r\n    }\r\n    return ErrorEvent;\r\n}(Event));\r\nexport { ErrorEvent };\r\nvar CloseEvent = /** @class */ (function (_super) {\r\n    __extends(CloseEvent, _super);\r\n    function CloseEvent(code, reason, target) {\r\n        if (code === void 0) { code = 1000; }\r\n        if (reason === void 0) { reason = ''; }\r\n        var _this = _super.call(this, 'close', target) || this;\r\n        _this.wasClean = true;\r\n        _this.code = code;\r\n        _this.reason = reason;\r\n        return _this;\r\n    }\r\n    return CloseEvent;\r\n}(Event));\r\nexport { CloseEvent };\r\n","references":[],"dts":{"name":"/home/runner/work/reconnecting-websocket-1/reconnecting-websocket-1/events.d.ts","writeByteOrderMark":false,"text":"export declare class Event {\r\n    target: any;\r\n    type: string;\r\n    constructor(type: string, target: any);\r\n}\r\nexport declare class ErrorEvent extends Event {\r\n    message: string;\r\n    error: Error;\r\n    constructor(error: Error, target: any);\r\n}\r\nexport declare class CloseEvent extends Event {\r\n    code: number;\r\n    reason: string;\r\n    wasClean: boolean;\r\n    constructor(code: number | undefined, reason: string | undefined, target: any);\r\n}\r\nexport interface WebSocketEventMap {\r\n    close: CloseEvent;\r\n    error: ErrorEvent;\r\n    message: MessageEvent;\r\n    open: Event;\r\n}\r\nexport interface WebSocketEventListenerMap {\r\n    close: (event: CloseEvent) => void | {\r\n        handleEvent: (event: CloseEvent) => void;\r\n    };\r\n    error: (event: ErrorEvent) => void | {\r\n        handleEvent: (event: ErrorEvent) => void;\r\n    };\r\n    message: (event: MessageEvent) => void | {\r\n        handleEvent: (event: MessageEvent) => void;\r\n    };\r\n    open: (event: Event) => void | {\r\n        handleEvent: (event: Event) => void;\r\n    };\r\n}\r\n"}}
